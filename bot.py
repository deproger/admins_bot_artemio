from telethon import TelegramClient, events, Button
from datetime import datetime
import asyncio
import pytz
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
API_ID = 2040
API_HASH = 'b18441a1ff607e10a989891a5462e627'
BOT_TOKEN = '7471754956:AAG89p6t1lkFt_jsrn4nFoHiLVdRtOzI0Y4'
ADMIN_ID = 464586595
# ADMIN_ID = 5477341107
USERS_FILE = 'users.txt'

# –ß–µ–∫-–ª–∏—Å—Ç—ã
MORNING_CHECKLIST = [
    "1. –ü—Ä–æ–≤–µ—Ä–∏–ª –ø–æ—á—Ç—É?",
    "2. –ü—Ä–æ–≤–µ—Ä–∏–ª –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
    "3. –°–æ—Å—Ç–∞–≤–∏–ª –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã?"
]

EVENING_CHECKLIST = [
    "1. –í—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏?",
    "2. –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è?",
    "3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"
]

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

client = TelegramClient('bot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

def load_users():
    if not os.path.exists(USERS_FILE):
        return set()
    with open(USERS_FILE, 'r') as f:
        return {int(line.strip()) for line in f if line.strip()}

def save_user(user_id):
    users = load_users()
    users.add(user_id)
    with open(USERS_FILE, 'w') as f:
        for uid in users:
            f.write(f"{uid}\n")

async def send_checklist(user_id, checklist_type):
    checklist = MORNING_CHECKLIST if checklist_type == 'morning' else EVENING_CHECKLIST
    user_data[user_id] = {
        'checklist': checklist,
        'answers': [],
        'details': [],
        'current_question': 0,
        'type': checklist_type
    }
    
    await client.send_message(user_id, f"üìã {'–£—Ç—Ä–µ–Ω–Ω–∏–π' if checklist_type == 'morning' else '–í–µ—á–µ—Ä–Ω–∏–π'} —á–µ–∫-–ª–∏—Å—Ç:")
    await ask_question(user_id)

async def ask_question(user_id):
    data = user_data[user_id]
    if data['current_question'] < len(data['checklist']):
        question = data['checklist'][data['current_question']]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        buttons = [
            [Button.inline('–î–∞', b'yes'), Button.inline('–ù–µ—Ç', b'no')]
        ]
        await client.send_message(user_id, question, buttons=buttons)
    else:
        await finish_checklist(user_id)

async def finish_checklist(user_id):
    data = user_data[user_id]
    checklist_type = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if data['type'] == 'morning' else "–í–µ—á–µ—Ä–Ω–∏–π"
    
    report = f"üìä {checklist_type} —á–µ–∫-–ª–∏—Å—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    for i in range(len(data['checklist'])):
        report += f"{data['checklist'][i]}\n–û—Ç–≤–µ—Ç: {'–î–∞' if data['answers'][i] else '–ù–µ—Ç'}"
        if not data['answers'][i] and i < len(data['details']):
            report += f"\n–ü–æ—è—Å–Ω–µ–Ω–∏–µ: {data['details'][i]}\n"
        report += "\n"
    
    await client.send_message(ADMIN_ID, report)
    await client.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
    del user_data[user_id]

async def send_test_checklists():
    users = load_users()
    if not users:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return
    
    print(f"–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for user_id in users:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await send_checklist(user_id, 'morning')
            await asyncio.sleep(1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
    print("–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def schedule_checklists():
    while True:
        now = datetime.now(pytz.timezone('Europe/Moscow')).time()
        
        if now.hour == 9 and now.minute == 0:
            for user_id in load_users():
                try:
                    await send_checklist(user_id, 'morning')
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
        
        elif now.hour == 18 and now.minute == 0:
            for user_id in load_users():
                try:
                    await send_checklist(user_id, 'evening')
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
        
        await asyncio.sleep(60)

@client.on(events.CallbackQuery)
async def callback_handler(event):
    user_id = event.sender_id
    if user_id not in user_data:
        return
    
    data = user_data[user_id]
    answer = event.data == b'yes'
    data['answers'].append(answer)
    
    if not answer:
        await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:")
        data['waiting_for_details'] = True
    else:
        data['current_question'] += 1
        data['details'].append(None)
        await ask_question(user_id)
    
    await event.delete()

@client.on(events.NewMessage)
async def message_handler(event):
    user_id = event.sender_id
    
    if user_id == ADMIN_ID:
        if event.text.lower() == '/test':
            await send_test_checklists()
        return
    
    if user_id not in load_users():
        save_user(user_id)
        await event.respond("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã!")
    
    if user_id in user_data:
        data = user_data[user_id]
        if data.get('waiting_for_details'):
            data['details'].append(event.text)
            data['current_question'] += 1
            data['waiting_for_details'] = False
            await ask_question(user_id)

async def main():
    await client.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await send_test_checklists()  # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await schedule_checklists()

if __name__ == '__main__':
    client.loop.run_until_complete(main())