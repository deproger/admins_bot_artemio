import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telethon import TelegramClient, events, Button
import pytz

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
TIMEZONE = os.getenv('TIMEZONE', 'Europe/Moscow')
MORNING_TIME = os.getenv('MORNING_TIME', '09:00').split(':')
EVENING_TIME = os.getenv('EVENING_TIME', '20:00').split(':')

# –ß–µ–∫-–ª–∏—Å—Ç—ã
MORNING_CHECKLIST = [
    ("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–º–µ–Ω–µ?", "text"),
    ("–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –º–∞—Å—Ç–µ—Ä–æ–≤?", "text"),
    ("–ö—Ç–æ-—Ç–æ –æ–ø–æ–∑–¥–∞–ª?", "text"),
    ("–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ? –ï—Å—Ç—å –ø–µ–Ω–∫–∞, –Ω–µ —Ç–µ—á—ë—Ç?", "yesno"),
    ("–£–±–æ—Ä–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ? –í—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å, –æ–∫–Ω–∞ —á–∏—Å—Ç—ã–µ?", "yesno"),
    ("–í –∑–æ–Ω–µ —Ä–µ—Ü–µ–ø—Ü–∏–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã?", "yesno"),
    ("–í —Ç—É–∞–ª–µ—Ç–µ –Ω–µ—Ç –∑–∞–ø–∞—Ö–∞, –µ—Å—Ç—å –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞, –±—É–º–∞–≥–∞, –æ—Å–≤–µ–∂–∏—Ç–µ–ª—å?", "yesno")
]

EVENING_CHECKLIST = [
    ("–î–µ–Ω—å –ø—Ä–æ—à–µ–ª –±–µ–∑ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π?", "yesno"),
    ("–ü—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –∫–æ–º—É-—Ç–æ –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ Ruha?", "yesno"),
    ("–ó–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏? (–≤–æ—Ä–æ—Ç–Ω–∏–∫–∏, –∫–æ—Ñ–µ, –º–æ–ª–æ–∫–æ, —Å–∞—Ö–∞—Ä, —à–æ–∫–æ–ª–∞–¥ –∏ —Ç.–¥.)", "yesno"),
    ("–ë—ã–ª–∏ –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏?", "yesno"),
    ("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —É—Ö–æ–¥–æ–º:", "reminder", "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, —Ç–µ–ª–µ–≤–∏–∑–æ—Ä, –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å –ø–æ–ª–æ—Ç–µ–Ω–µ—Ü")
]

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.txt'
LOGS_DIR = 'logs'

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('bot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)


def setup():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã"""
    os.makedirs(LOGS_DIR, exist_ok=True)
    if not os.path.exists(USERS_FILE):
        open(USERS_FILE, 'w').close()

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(USERS_FILE, 'r') as f:
        return {int(line.strip()) for line in f if line.strip()}

def save_user(user_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_users()
    users.add(user_id)
    with open(USERS_FILE, 'w') as f:
        for uid in users:
            f.write(f"{uid}\n")

async def send_checklist(user_id, checklist_type):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫-–ª–∏—Å—Ç–∞"""
    checklist = MORNING_CHECKLIST if checklist_type == 'morning' else EVENING_CHECKLIST
    user_data[user_id] = {
        'checklist': checklist,
        'answers': [],
        'details': [],
        'current_question': 0,
        'type': checklist_type,
        'date': datetime.now().strftime('%Y-%m-%d')
    }
    
    greeting = "üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ß–µ–∫-–ª–∏—Å—Ç –ë–†–û (—É—Ç—Ä–æ)" if checklist_type == 'morning' else "üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ß–µ–∫-–ª–∏—Å—Ç –ë–†–û (–≤–µ—á–µ—Ä)"
    await client.send_message(user_id, greeting)
    await ask_question(user_id)

async def ask_question(user_id):
    """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞"""
    data = user_data[user_id]
    if data['current_question'] < len(data['checklist']):
        question, qtype, *extra = data['checklist'][data['current_question']]
        
        if qtype == 'yesno':
            buttons = [[Button.inline('–î–∞', b'yes'), Button.inline('–ù–µ—Ç', b'no')]]
            await client.send_message(user_id, question, buttons=buttons)
        elif qtype == 'text':
            await client.send_message(user_id, f"{question}\n(–û—Ç–≤–µ—Ç—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)")
        elif qtype == 'reminder':
            data['answers'].append(None)
            data['details'].append(extra[0])
            data['current_question'] += 1
            await ask_question(user_id)
    else:
        await finish_checklist(user_id)

async def finish_checklist(user_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç"""
    data = user_data[user_id]
    checklist_type = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if data['type'] == 'morning' else "–í–µ—á–µ—Ä–Ω–∏–π"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"üìã {checklist_type} —á–µ–∫-–ª–∏—Å—Ç –ë–†–û {data['date']}\n\n"
    for i, (question, qtype, *_) in enumerate(data['checklist']):
        report += f"{question}\n"
        
        if qtype in ('yesno', 'text'):
            if qtype == 'yesno':
                answer = "–î–∞" if data['answers'][i] else "–ù–µ—Ç"
                report += f"–û—Ç–≤–µ—Ç: {answer}\n"
            if i < len(data['details']) and data['details'][i]:
                report += f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {data['details'][i]}\n"
        elif qtype == 'reminder':
            report += f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {data['details'][i]}\n"
        
        report += "\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
    log_file = os.path.join(LOGS_DIR, f"{data['type']}_{data['date']}.txt")
    with open(log_file, 'a') as f:
        f.write(f"=== –û—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ===\n")
        f.write(report)
        f.write("\n")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await client.send_message(ADMIN_ID, f"üì© –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç @{(await client.get_entity(user_id)).username}:\n\n{report}")
    await client.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
    del user_data[user_id]

async def check_time(target_hour, target_minute):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    now = datetime.now(pytz.timezone(TIMEZONE))
    return now.hour == target_hour and now.minute == target_minute

async def schedule_checklists():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤"""
    while True:
        # –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç
        if await check_time(int(MORNING_TIME[0]), int(MORNING_TIME[1])):
            for user_id in load_users():
                try:
                    await send_checklist(user_id, 'morning')
                    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç
        elif await check_time(int(EVENING_TIME[0]), int(EVENING_TIME[1])):
            for user_id in load_users():
                try:
                    await send_checklist(user_id, 'evening')
                    await asyncio.sleep(1)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

@client.on(events.CallbackQuery)
async def callback_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç"""
    user_id = event.sender_id
    if user_id not in user_data:
        return
    
    data = user_data[user_id]
    answer = event.data == b'yes'
    data['answers'].append(answer)
    
    if not answer:
        await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:")
        data['waiting_for_details'] = True
    else:
        data['details'].append(None)
        data['current_question'] += 1
    
    await ask_question(user_id)
    await event.delete()

@client.on(events.NewMessage)
async def message_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = event.sender_id
    
    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_ID:
        if event.text.lower() == '/test':
            await send_test_checklists(event)
        elif event.text.lower() == '/users':
            users = load_users()
            await event.respond(f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(users)}\nID: {', '.join(map(str, users))}")
        return
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id not in load_users():
        save_user(user_id)
        await event.respond("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã –ë–†–û.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if user_id in user_data:
        data = user_data[user_id]
        
        if data.get('waiting_for_details'):
            data['details'].append(event.text)
            data['current_question'] += 1
            data['waiting_for_details'] = False
            await ask_question(user_id)
        elif data['current_question'] < len(data['checklist']):
            qtype = data['checklist'][data['current_question']][1]
            if qtype == 'text':
                data['answers'].append(True)  # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                data['details'].append(event.text)
                data['current_question'] += 1
                await ask_question(user_id)

async def send_test_checklists(event=None):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–æ–≤"""
    users = load_users()
    if not users:
        msg = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
        print(msg)
        if event: await event.respond(msg)
        return
    
    msg = f"–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
    print(msg)
    if event: await event.respond(msg)
    
    for user_id in users:
        try:
            await send_checklist(user_id, 'morning')
            await asyncio.sleep(1)
        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
            print(error)
            if event: await event.respond(error)
    
    msg = "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    print(msg)
    if event: await event.respond(msg)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup()
    await client.start()
    print("ü§ñ –ë–æ—Ç –ë–†–û —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!")
    await schedule_checklists()

if __name__ == '__main__':
    client.loop.run_until_complete(main())